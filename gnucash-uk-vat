#!/usr/bin/env python3

import sys
import argparse
import json
from datetime import datetime, timedelta
from tabulate import tabulate
import uuid
import getpass
import socket
import os

import hmrc
import accounts

parser = argparse.ArgumentParser(description="Gnucash to HMRC VAT API")
parser.add_argument('--config', '-c',
		    default='config.json',
                    help='Configuration file')
parser.add_argument('--auth', '-a',
		    default='auth.json',
                    help='File to store auth credentials')
parser.add_argument('--init-config', action='store_true',
                    help='Initialise configuration')
parser.add_argument('--authenticate', action='store_true',
                    help='Perform authentication process')
parser.add_argument('--show-open-obligations', action='store_true',
                    help='Show VAT obligations')
parser.add_argument('--show-obligations', action='store_true',
                    help='Show all VAT obligations in time period')
parser.add_argument('--start',
                    default=356,
                    help='Start period as days back from today')
parser.add_argument('--end',
                    default=0,
                    help='End of period as days back from today')
parser.add_argument('--show-account-data', action='store_true',
                    help='Show account data for VAT obligations')
parser.add_argument('--show-vat-return', action='store_true',
                    help='Show VAT return for period')
parser.add_argument('--period', default=None,
                    help='VAT period key')
parser.add_argument('--submit-vat-return', action='store_true',
                    help='Submit VAT return for period')
parser.add_argument('--show-liabilities', action='store_true',
                    help='Show VAT liabilities')
parser.add_argument('--show-payments', action='store_true',
                    help='Show VAT payments')

args = parser.parse_args(sys.argv[1:])

class Config:
    def __init__(self, file="config.json"):
        self.config = json.loads(open(file).read())
    def get(self, key):
        cfg = self.config
        for v in key.split("."):
            cfg = cfg[v]
        return cfg

class Auth:
    def __init__(self, file="auth.json"):
        self.file = file
        try:
            self.auth = json.loads(open(file).read())
        except:
            self.auth = {}
    def get(self, key):
        cfg = self.auth
        for v in key.split("."):
            cfg = cfg[v]
        return cfg

    def write(self):
        with open(self.file, "w") as auth_file:
            auth_file.write(json.dumps(self.auth, indent=4))

    def refresh(self, svc):
        self.auth = svc.refresh_token(self.auth["refresh_token"])
        self.write()

    def maybe_refresh(self, svc):
        if "expires" not in self.auth:
            raise RuntimeError("No token expiry.  Have you authenticated?")
        expires = datetime.fromisoformat(self.auth["expires"])
        if  datetime.utcnow() > expires:
            self.refresh(svc)

if args.init_config:

    # FIXME: This is SOOOO hacky
    try:
        mac = uuid.getnode()
        mac = ['{:02x}'.format((mac >> ele) & 0xff) for ele in range(0,8*6,8)][::-1]
        mac = ':'.join(mac)
    except:
        mac = '00:00:00:00:00:00'

    uname = os.uname()
    ua = "%s/%s (%s/%s)" % (
        uname.sysname, uname.release, "Python", uname.machine
    )

#'Linux/5.8.7-200.fc32.x86_64 (Intel/x686)',

    config = {
        "accounts": {
	    "file": "accounts/accounts.gnucash",
            "vatDueSales": "VAT:Output:Sales",
            "vatDueAcquisitions": "VAT:Output:EU",
            "totalVatDue": "VAT:Output",
            "vatReclaimedCurrPeriod": "VAT:Input",
            "netVatDue": "VAT",
            "totalValueSalesExVAT":
            "Assets:Capital Equipment:EU Reverse VAT Purchase",
            "totalValuePurchasesExVAT": "Assets:Computer Equipment",
            "totalValueGoodsSuppliedExVAT": "Income:Sales:EU:Goods",
            "totalAcquisitionsExVAT": "Expenses:VAT Purchases:EU Reverse VAT"
        },
        "application": {
            "name": "gnucash-uk-vat",
            "profile": "test",
            "client-id": "<CLIENTID>",
            "client-secret": "<CLIENTSECRET>"
        },
        "identity": {
            "vrn": "<VRN>",
            "device": str(uuid.uuid1()),
            "user": getpass.getuser(),
            "hostname": socket.gethostbyname(socket.gethostname()),
            "mac-address": mac,
            "user-agent": ua
        }
    }

    with open(args.config, "w") as cfg_file:
        cfg_file.write(json.dumps(config, indent=4))

    sys.stderr.write("Wrote %s.\n" % args.config)
    sys.exit(0)

config = Config(args.config)
auth = Auth(args.auth)

prof = config.get("application.profile")

if prof == "prod":
    h = hmrc.Vat(config, auth)
elif prof == "test":
    h = hmrc.VatTest(config, auth)
elif prof == "local":
    h = hmrc.VatLocalTest(config, auth)
else:
    raise RuntimeError("Profile '%s' is not known." % prof)

if args.authenticate:
    code = h.get_code()
    sys.stderr.write("Got one-time code.\n")
    h.get_auth(code)
    sys.stderr.write("Got authentication key.\n")
    auth.write()
    sys.stderr.write("Wrote %s.\n" % args.auth)

    sys.exit(0)

# Refresh token if expired.
auth.maybe_refresh(h)

if args.show_open_obligations:

    obs = h.get_open_obligations(config.get("identity.vrn"))

    tbl = [
        [v['periodKey'], v['start'], v['end'], v['due'], v['status']]
        for v in obs
    ]

    print(tabulate(tbl, ["Period", "Start", "End", "Due", "Status"],
                   tablefmt="pretty"))

    sys.exit(0)

if args.show_obligations:

    start = datetime.utcnow() - timedelta(days=int(args.start))
    end = datetime.utcnow() - timedelta(days=int(args.end))

    obs = h.get_obligations(config.get("identity.vrn"), start, end)

    tbl = [
        [v['periodKey'], v['start'], v['end'], v['due'], v['received'], v['status']]
        for v in obs
    ]

    print(tabulate(tbl, ["Period", "Start", "End", "Due", "Received", "Status"],
                   tablefmt="pretty"))

    sys.exit(0)

if args.submit_vat_return:

    obs = h.get_open_obligations(config.get("identity.vrn"))

    period = None

    for v in obs:
        if v["periodKey"] == args.period:
            period = v

    if period == None:
        raise RuntimeError("Period '%s' not in obligations" % args.period)

    start = period["start"]
    end = period["end"]

    accts = accounts.Accounts(config)
    vals = accts.get_vat(period['start'], period['end'])

    rtn = {
        "periodKey": args.period,
        "finalised": True
    }
    
    for k in range(0, 9):
        valueName = hmrc.vat_box[k]
        rtn[valueName] = vals[valueName]["total"]

    print("%-30s: %15.2f" % ("VAT due on sales", rtn["vatDueSales"]))
    print("%-30s: %15.2f" % ("VAT due on acquisitions", rtn["vatDueAcquisitions"]))
    print("%-30s: %15.2f" % ("Total VAT due", rtn["totalVatDue"]))
    print("%-30s: %15.2f" % ("VAT reclaimed", rtn["vatReclaimedCurrPeriod"]))
    print("%-30s: %15.2f" % ("VAT due", rtn["netVatDue"]))
    print("%-30s: %15.2f" % ("Sales before VAT", rtn["totalValueSalesExVAT"]))
    print("%-30s: %15.2f" % ("Purchases ex. VAT", rtn["totalValuePurchasesExVAT"]))
    print("%-30s: %15.2f" % ("Goods supplied ex. VAT",
                         rtn["totalValueGoodsSuppliedExVAT"]))
    print("%-30s: %15.2f" % ("Total acquisitions ex. VAT",
                         rtn["totalAcquisitionsExVAT"]))

    resp = h.submit_vat_return(config.get("identity.vrn"), rtn)
    print(resp)

    sys.exit(0)

if args.show_account_data:

    obs = h.get_open_obligations(config.get("identity.vrn"))

    accts = accounts.Accounts(config)

    for v in obs:

        print("Period: %-10s    Start: %-10s     End: %-10s" % (
            v["periodKey"], v["start"], v["end"]
        ))
        print()

        vals = accts.get_vat(v['start'], v['end'])

        for k in range(0, 9):

            valueName = hmrc.vat_box[k]

            print("    %s: %10.2f" % (valueName, vals[valueName]["total"]))
            print()

            if len(vals[valueName]["splits"]) > 0:

                tbl = []

                for w in vals[valueName]["splits"]:
                    tbl.append([
                        w["date"], "%.2f" % w["amount"], w["description"][0:60]
                    ])

                tbl = tabulate(tbl, tablefmt="pretty",
                               colalign=("left", "right","left"))

                tbl = "        " + tbl.replace("\n", "\n        ")
                print(tbl)

                print()

    sys.exit(0)

if args.show_vat_return:

    rtn = h.get_vat_return(config.get("identity.vrn"), args.period)

    print("%-30s: %15.2f" % ("VAT due on sales", rtn["vatDueSales"]))
    print("%-30s: %15.2f" % ("VAT due on acquisitions", rtn["vatDueAcquisitions"]))
    print("%-30s: %15.2f" % ("Total VAT due", rtn["totalVatDue"]))
    print("%-30s: %15.2f" % ("VAT reclaimed", rtn["vatReclaimedCurrPeriod"]))
    print("%-30s: %15.2f" % ("VAT due", rtn["netVatDue"]))
    print("%-30s: %15.2f" % ("Sales before VAT", rtn["totalValueSalesExVAT"]))
    print("%-30s: %15.2f" % ("Purchases ex. VAT", rtn["totalValuePurchasesExVAT"]))
    print("%-30s: %15.2f" % ("Goods supplied ex. VAT",
                         rtn["totalValueGoodsSuppliedExVAT"]))
    print("%-30s: %15.2f" % ("Total acquisitions ex. VAT",
                         rtn["totalAcquisitionsExVAT"]))

    sys.exit(0)

if args.show_liabilities:

    start = datetime.utcnow() - timedelta(days=int(args.start))
    end = datetime.utcnow() - timedelta(days=int(args.end))

    rtn = h.get_vat_liabilities(config.get("identity.vrn"), start, end)

    tbl = []

    for v in rtn:
        ent = []
        if "taxPeriod" in v:
            ent.append(v["taxPeriod"]["from"])
        else:
            ent.append("")
        ent.append(v["type"][0:20])
        ent.append(v["originalAmount"])
        ent.append(v["outstandingAmount"])
        if "due" in v:
            ent.append(v["due"])
        else:
            ent.append("")
        tbl.append(ent)

    print(tabulate(tbl, ["Period", "Type", "Amount", "Outstanding", "Due"],
                   tablefmt="pretty"))

    sys.exit(0)

if args.show_payments:

    start = datetime.utcnow() - timedelta(days=int(args.start))
    end = datetime.utcnow() - timedelta(days=int(args.end))

    rtn = h.get_vat_payments(config.get("identity.vrn"), start, end)

    tbl = []

    for v in rtn:
        ent = []
        ent.append(v["amount"])
        if "received" in v:
            ent.append(v["received"])
        tbl.append(ent)

    print(tabulate(tbl, ["Amount", "Received"],
                   tablefmt="pretty"))

    sys.exit(0)

